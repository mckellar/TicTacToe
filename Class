public class TicTacToe {

//variables
  private int difficulty = 0;  //automatically set to novice difficulty
  private String playerxo = "";
  private String compxo = "";
  private int psMove; //number box where the player just went
  private int csMove; //where comp just went
  private int compGo = -1; //computer can go there?
  private int boxesopen;
  private int compsmoves = 0;
  private int playersmoves = 0;
  private int totalmoves = 0;
  private String plast;
  private int wheretogo = -1;
  
  String [] board = { 
       "\t     ", "1" , "\t|     " , "2", "\t|     " , "3" , "\t" ,
       "\n\t________________________________\n",
       "\t     ", "4" , "\t|     " , "5", "\t|     " , "6" , "\t" ,
       "\n\t________________________________\n",
       "\t     ", "7" , "\t|     " , "8", "\t|     " , "9" , "\t" };
  
  int [] numbers = { 1, 3, 5, 9, 11, 13, 17, 19, 21 };
  
  int [] pH = new int [9];
  int [] cH = new int [9];
  
  int [] history = new int [9];
  
  int [] rotation0 = { //no rotations
    1, 2, 3,
    4, 5, 6,
    7, 8, 9 };
  
  int [] rotation1 = {
    7, 4, 1,
    8, 5, 2,
    9, 6, 3 };
  
  int [] rotation2 = {
    9, 8, 7,
    6, 5, 4, 
    3, 2, 1 };
  
  int [] rotation3 = {
    3, 6, 9,
    2, 5, 8, 
    1, 4, 7 };
  
  
  
//blank board 
 public void TicTacToe() { //new board or print board
      System.out.print("\n");
         for (int i = 0; i < board.length; i++){
           System.out.print( board[i] );
         }
       System.out.print("\n");
      
      /*
       * 1 = board[1]
       * 2 = board[3]
       * 3 = board[5]
       * 4 = board[9]
       * 5 = board[11]
       * 6 = board[13]
       * 7 = board[17]
       * 8 = board[19]
       * 9 = board[21]
       */
   }
 
 
//difficulty  
 public void setDifficulty(String d) {
   if (d.equals("EASY"))
     difficulty = 0;
   else
     difficulty = 1;
   System.out.println("\tDifficulty is set to " + d.toLowerCase() + ".");
 }

//who's x and who's o
public void setXO( String p, String c) {
   playerxo = p.toUpperCase();
   compxo = c.toUpperCase();
 }

//covert box number inputted (1 - 9) to number position in array.
public int convert (int box) {
  
  if (box == 1)
    return 1;
  if (box == 2)
    return 3;
  if (box == 3)
    return 5;
  if (box == 4)
    return 9;
  if (box == 5)
    return 11;
  if (box == 6)
    return 13;
  if (box == 7)
    return 17;
  if (box == 8)
    return 19;
  if (box == 9)
    return 21;
  
  return -1; //just to get it to work
}

//check for catsgame
public String cats() {
  boxesopen = 9;
  for (int i = 0; i < numbers.length; i++ ) {
    if ( (board[numbers[i]].equals("X")) || (board[numbers[i]].equals("X")) )
       boxesopen--;
  }
  if (boxesopen == 0)
    return "cats";
  return "no";
}
 
//catsgame
public void catsgame() {
   System.out.println("\n\n\tCATSGAME!!!\nSorry, you tied!\n\tNobody can beat the computer!!!!");
}

//WINNNNNN

public void win() {
 ////adddd some stuff.....
}

//move player---------------------------------------------------
public int move(int box, String who) {
  int a = convert(box);
  if ( board[a].equals("X") || board[a].equals("O") )
    return -1; //can't go there
  if (who.equals("P") ) {
    psMove = box;
    board[a] = playerxo;
    playersmoves++;
    totalmoves++;
    history(box, "P");}
  else {
    board[a] = compxo;
    csMove = box;
    compsmoves++;
    totalmoves++;
    history(box, "C");}
  return box;
}

//Move History
public void history(int h, String who) {
  if (who.equals("P")) {
    pH[playersmoves-1] = psMove;
    history[totalmoves-1] = psMove; }
  else {
    cH[compsmoves-1] = csMove;
    history[totalmoves-1] = csMove; }
  printhist();
}

public void printhist() { 
 // for (int i = 0; i < history.length; i++)
     // System.out.print( " " + history[i] + " ");
   //System.out.print("\n total moves : " + totalmoves + "    psMove: " + psMove);
}

//Computer's moves-----------------------------------

//easy move computer
public int moveCompEASY() {
  while (compGo == -1) {
      compGo = move( ((int)((Math.random()*9) + 1)), "C" ); }
  csMove = compGo;
  compGo = -1;
  return csMove;
}

//hard move computer
public int moveCompHARD() {
         wheretogo = -1;
  while (wheretogo == -1) {
                          //first move comp 
                          //    if (totalmoves == 1) {}
      if (history[0] == 1 || history[0] == 7 || history[0] == 9 || history[0] ==3) {// if a corner
           if (totalmoves == 1){ //cmove1 if c's first move
               move(5, "C");
               wheretogo = 5;
               return wheretogo;}
           if (history[2] == 2){ //path1
                       fi(3,3);
                 if (history[4] != 7 ) {
                            if (totalmoves == 5) {
                                 move(7, "C");
                                 wheretogo = 7; 
                                 win();
                                 return wheretogo;} //WIN   
                                 }
                 if (history[4] == 7 ) {
                             fi(5, 4);
                     if (history[6] != 6) {
                            if (totalmoves == 7) {
                                 move(6, "C");
                                 wheretogo = 6; 
                                 win();   
                                 return wheretogo;} //WIN
                     }
                     if (history[6] == 6 ) {
                                fi(7,9);  
                           if (history[8] == 8) {
                              //catsgame;
                              catsgame();
                              break;
                              }
                     }}}
                                         
      }//end if a corner 
     }//endwhile
           return wheretogo;
          }
 
  public void fi (int a, int b) {
      if (totalmoves == a) {
          move(b, "C");
          wheretogo = b;}
}



}
